<!-- public/games/GuessBrandGame.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Guess the Brand</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f8f9fa;
      font-family: Arial, sans-serif;
    }
    .game-container {
      max-width: 800px;
      margin: 2rem auto;
      padding: 2rem;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .brand-display {
      font-size: 2.5rem;
      text-align: center;
      margin: 2rem 0;
      font-weight: bold;
      letter-spacing: 3px;
    }
    .timer {
      font-size: 1.5rem;
      text-align: center;
      color: #dc3545;
    }
    .message {
      margin: 1rem 0;
      padding: 1rem;
      border-radius: 5px;
    }
    .message.success {
      background-color: #d4edda;
      color: #155724;
    }
    .message.error {
      background-color: #f8d7da;
      color: #721c24;
    }
    .scoreboard {
      margin-top: 2rem;
      padding: 1rem;
      background-color: #f8f9fa;
      border-radius: 5px;
    }
    .endgame-screen {
      display: none;
      margin-top: 2rem;
      padding: 1rem;
      border: 2px solid #28a745;
      border-radius: 10px;
      background-color: #d4edda;
      text-align: center;
    }
    .endgame-screen h2 {
      margin-bottom: 1rem;
    }
    .endgame-screen .standings {
      margin-top: 1rem;
    }
  </style>
</head>
<body>
  <div class="game-container">
    <div id="gameSection">
      <div class="d-flex justify-content-between align-items-center">
        <h2>Round <span id="roundNumber">0</span></h2>
        <div class="timer">Time: <span id="timer">10</span>s</div>
      </div>

      <div class="brand-display" id="brandDisplay"></div>

      <form id="guessForm" class="mb-3">
        <div class="input-group">
          <input type="text" class="form-control" id="guessInput" placeholder="Enter brand name...">
          <button class="btn btn-primary" type="submit">Guess</button>
        </div>
      </form>

      <div id="message" class="message" style="display: none;"></div>

      <div class="scoreboard">
        <h3>Scores</h3>
        <div id="scoresList"></div>
      </div>
    </div>
    <div id="endGameScreen" class="endgame-screen">
      <h2>Game Over!</h2>
      <div id="endGameDetails"></div>
      <button id="restartButton" class="btn btn-primary mt-3">Play Again</button>
    </div>
  </div>

  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <script src="EndGameScreen.js"></script>
  <!-- Include constants.js -->
  <script src="/constants.js"></script>

  <script>
    console.log("Guess the Brand game page loaded.");

    // Use query parameters for currentRoom and userId
    const params = new URLSearchParams(window.location.search);
    const currentRoom = params.get('roomId');
    const userId = parseInt(params.get('userId'), 10);
    const currentUser = { id: userId };

    // Check for room
    if (!currentRoom) { alert("No roomId specified in the URL."); }

    // Use same socket URL
    const socket = io(BASE_URL);

    socket.on('connect', () => {
      if (currentRoom) {
        socket.emit('joinRoomSocket', { roomId: currentRoom, playerId: currentUser.id });
      }
    });

    socket.on('disconnect', () => { console.log("Socket disconnected"); });
    socket.on('error', (err) => { console.error("Socket error:", err); });

    socket.on('newRound', (data) => {
      const state = data.initialState || { roundNumber: data.roundNumber, maskedBrand: data.maskedBrand };
      gameState = state;
      document.getElementById('roundNumber').textContent = state.roundNumber || 0;
      document.getElementById('brandDisplay').textContent = state.maskedBrand || '';
      document.getElementById('timer').textContent = data.duration || 10;
      document.getElementById('message').style.display = 'none';
      document.getElementById('guessInput').value = '';
      startTimer(data.duration || 10);
    });

    socket.on('gameStateUpdate', (data) => {
      updateScoreboard(data.scores, data.state ? data.state.correctGuesses : {});
    });

    socket.on('roundEnded', (data) => {
      showMessage(`Time's up! The brand was: ${data.correctBrand}`, 'error');
      updateScoreboard(data.scores, data.correctGuesses);
    });

    socket.on('gameEnded', (data) => {
      document.getElementById('gameSection').style.display = 'none';
      const endDetailsEl = document.getElementById('endGameDetails');
      const winner = data.standings[0];
      let html = `<p><strong>Winner:</strong> ${winner.playerData.username || winner.playerId}</p>`;
      html += `<p><strong>Score:</strong> ${winner.score}</p>`;
      if(data.standings.length > 1) {
        html += `<div class="standings"><h3>Other Players:</h3>`;
        data.standings.slice(1).forEach(item => { html += `<p>Player ${item.playerData.username || item.playerId}: ${item.score} points</p>`; });
        html += `</div>`;
      }
      endDetailsEl.innerHTML = html;
      document.getElementById('endGameScreen').style.display = 'block';
    });

    // Handle guess submission
    document.getElementById('guessForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const guess = document.getElementById('guessInput').value.trim();
      console.log("Guess submitted:", guess);
      if (guess && currentRoom) {
        socket.emit('gameAction', {
          roomId: currentRoom,
          playerId: currentUser.id,
          action: {
            type: 'guess',
            guess: guess
          }
        });
      } else {
        console.warn("No guess entered or no room joined yet.");
      }
    });

    // Helper: Show a message
    function showMessage(text, type) {
      const messageEl = document.getElementById('message');
      messageEl.textContent = text;
      messageEl.className = `message ${type}`;
      messageEl.style.display = 'block';
    }

    // Helper: Update scoreboard
    function updateScoreboard(scores, correctGuesses) {
      const scoresList = document.getElementById('scoresList');
      scoresList.innerHTML = Object.entries(scores)
        .map(([pid, score]) => {
          const correct = correctGuesses[pid] || 0;
          return `
            <div class="d-flex justify-content-between mb-2">
              <span>Player ${pid}</span>
              <span>${score} points (${correct} correct)</span>
            </div>
          `;
        })
        .join('');
    }

    // Helper: Start local countdown
    let timerInterval;
    function startTimer(duration) {
      clearInterval(timerInterval);
      let timeLeft = duration;
      document.getElementById('timer').textContent = timeLeft;

      timerInterval = setInterval(() => {
        timeLeft--;
        document.getElementById('timer').textContent = Math.max(0, timeLeft);
        if (timeLeft <= 0) {
          clearInterval(timerInterval);
        }
      }, 1000);
    }

    // Optional: restart game handler
    document.getElementById('restartButton').addEventListener('click', () => {
      window.location.reload();
    });
  </script>
</body>
</html>
