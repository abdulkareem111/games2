<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Minesweeper Game</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      height: 100%;
      background-color: #0d0d0d;
      font-family: Arial, sans-serif;
      color: #fff;
    }
    .game-container {
      width: 100%;
      height: 100vh;
      display: flex;
      flex-direction: column;
      box-sizing: border-box;
      padding: 1rem;
      background-color: #181818;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.8);
    }
    table#minesweeperGrid {
      border-collapse: collapse;
      margin: 1rem auto;
    }
    table#minesweeperGrid td {
      width: 40px;
      height: 40px;
      text-align: center;
      vertical-align: middle;
      border: 1px solid #39ff14;
      cursor: pointer;
      color: #fff;
      font-weight: bold;
    }
    .cell-hidden {
      background-color: #333;
    }
    .cell-revealed {
      background-color: #222;
    }
    .cell-player1 {
      background-color: #AA0000 !important;
    }
    .cell-player2 {
      background-color: #0000AA !important;
    }
    .message {
      margin: 1rem 0;
      padding: 1rem;
      border-radius: 5px;
      display: none;
    }
    .message.success {
      background-color: #39ff14;
      color: #000;
    }
    .message.error {
      background-color: #ff5722;
      color: #000;
    }
    #countdownTimer {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 8rem;
      color: #39ff14;
      z-index: 2000;
      display: none;
    }
  </style>
</head>
<body>
  <div class="game-container container-fluid">
    <div class="row">
      <div class="col-md-8 d-flex flex-column align-items-center">
        <h2>Minesweeper Game - Room <span id="roomIdLabel"></span></h2>
        <div>Round: <span id="roundNumber">1</span></div>
        <div>Current Turn: <span id="turnIndicator"></span></div>
        <table id="minesweeperGrid"></table>
        <div id="message" class="message"></div>
      </div>
      <div class="col-md-4">
        <h5 class="mt-3">Scoreboard</h5>
        <div id="scoresList" class="p-2 border rounded" style="min-height: 150px;"></div>
      </div>
    </div>
  </div>
  <div id="countdownTimer"></div>
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/components/EndGameScreen.js"></script>
  <script src="/constants.js"></script>
  <script>
    // Replace localStorage user retrieval with query param extraction
    const params = new URLSearchParams(window.location.search);
    const currentRoom = params.get('roomId');
    const userId = parseInt(params.get('userId'), 10);
    const currentUser = { id: userId };
    document.getElementById('roomIdLabel').textContent = currentRoom || 'N/A';

    // Use same socket URL as SnakeGame
    const socket = io(BASE_URL);

    socket.on('connect', () => {
      console.log("Socket connected:", socket.id);
      if(currentRoom) {
        socket.emit('joinRoomSocket', { roomId: currentRoom, playerId: currentUser.id });
      }
    });

    socket.on('disconnect', () => { console.log("Socket disconnected"); });
    socket.on('error', (err) => { console.error("Socket error:", err); });

    socket.on('newRound', (data) => {
      // use initialState if provided (else use data)
      const state = data.initialState || { roundNumber: data.roundNumber, rows: data.rows, cols: data.cols };
      gameState = state;
      document.getElementById('roundNumber').textContent = state.roundNumber || 1;
      showMessage('New round started!', 'success');
      createGrid(state.rows, state.cols);
    });

    socket.on('gameStateUpdate', (data) => {
      if(data.state) {
        gameState = data.state;
      }
      updateScoreboard();
      renderGame();
    });

    socket.on('roundEnded', (data) => {
      showMessage("Round ended: " + data.reason, "error");
      updateScoreboard();
    });

    socket.on('gameEnded', (data) => {
      console.log("Received gameEnded:", data);
      let html = '<p><strong>Reason:</strong> ' + data.reason + '</p>';
      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        html += '<p><strong>Winner:</strong> ' + (winner.playerData.username || winner.playerId) + ' (Score: ' + winner.score + ')</p>';
        if (data.standings.length > 1) {
          html += '<h5>Other Standings:</h5>';
          data.standings.slice(1).forEach((player) => {
            html += '<p>Player ' + player.playerId + ': ' + player.score + ' pts</p>';
          });
        }
      }
      document.getElementById('endGameDetails').innerHTML = html;
      const endGameModal = new bootstrap.Modal(document.getElementById('endGameModal'));
      endGameModal.show();
      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        fetch('/api/rooms/finish', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ roomId: currentRoom, winners: [winner.playerId] })
        })
        .then(response => response.json())
        .then(result => console.log('Finished room:', result))
        .catch(err => console.error('Finish room failed:', err));
      }
    });

    socket.on('gameStarting', (data) => {
      const timerEl = document.getElementById('countdownTimer');
      timerEl.style.display = 'flex';
      timerEl.textContent = data.countdown;
      const countdownInterval = setInterval(() => {
        let current = parseInt(timerEl.textContent, 10);
        if (current > 1) { timerEl.textContent = current - 1; }
        else { clearInterval(countdownInterval); timerEl.style.display = 'none'; }
      }, 1000);
    });

    document.getElementById('goHomeButton').addEventListener('click', () => { window.location.href = '/'; });

    function createGrid(rows, cols) {
      const table = document.getElementById('minesweeperGrid');
      table.innerHTML = '';
      for(let r = 0; r < rows; r++) {
        const tr = document.createElement('tr');
        for(let c = 0; c < cols; c++) {
          const td = document.createElement('td');
          td.classList.add('cell-hidden');
          td.setAttribute('data-row', r);
          td.setAttribute('data-col', c);
          td.addEventListener('click', onCellClick);
          tr.appendChild(td);
        }
        table.appendChild(tr);
      }
    }

    function onCellClick(e) {
      const row = parseInt(e.target.getAttribute('data-row'));
      const col = parseInt(e.target.getAttribute('data-col'));
      socket.emit('gameAction', {
        roomId: currentRoom,
        playerId: currentUser.id,
        action: { type: 'revealCell', row, col }
      });
    }

    function renderGame() {
      const rows = gameState.revealedCells.length;
      const cols = rows ? gameState.revealedCells[0].length : 0;
      const table = document.getElementById('minesweeperGrid');
      const turnIndicator = document.getElementById('turnIndicator');

      if(gameState.currentTurn === currentUser.id) {
        turnIndicator.textContent = 'Your turn';
      } else {
        turnIndicator.textContent = 'Opponent\'s turn';
      }

      for(let r = 0; r < rows; r++) {
        const rowEl = table.rows[r];
        for(let c = 0; c < cols; c++) {
          const cellData = gameState.revealedCells[r][c];
          const cellEl = rowEl.cells[c];

          if(cellData) {
            cellEl.classList.remove('cell-hidden');
            cellEl.classList.add('cell-revealed');
            let colorClass = '';
            if(cellData.revealedBy === currentUser.id) {
              colorClass = 'cell-player1';
            } else {
              colorClass = 'cell-player2';
            }
            cellEl.classList.add(colorClass);

            if(cellData.mine) {
              cellEl.textContent = 'M';
            } else if(cellData.adjacentMines > 0) {
              cellEl.textContent = cellData.adjacentMines;
            } else {
              cellEl.textContent = '';
            }
          } else {
            cellEl.classList.remove('cell-revealed');
            cellEl.classList.add('cell-hidden');
            cellEl.textContent = '';
          }
        }
      }
    }

    function showMessage(text, type) {
      const msg = document.getElementById('message');
      msg.textContent = text;
      msg.className = 'message ' + type;
      msg.style.display = 'block';
      setTimeout(() => {
        msg.style.display = 'none';
      }, 3000);
    }

    function updateScoreboard(scores) {
      const scoresList = document.getElementById('scoresList');
      if(!scores || Object.keys(scores).length === 0) {
        scoresList.innerHTML = '<p>No scores yet</p>';
        return;
      }
      let html = '';
      for(const [playerId, score] of Object.entries(scores)) {
        html += '<p>Player <strong>' + playerId + '</strong>: ' + score + ' pts</p>';
      }
      scoresList.innerHTML = html;
    }
  </script>
</body>
</html>