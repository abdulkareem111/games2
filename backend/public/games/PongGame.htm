<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Pong Game</title>

  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />

  <style>
    /* Updated dark/neon theme */
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      height: 100%;
      background-color: #0d0d0d;
      font-family: Arial, sans-serif;
      color: #fff;
    }
    .game-container {
      width: 100%;
      height: 100vh;
      display: flex;
      flex-direction: column;
      box-sizing: border-box;
      padding: 1rem;
      background-color: #181818;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.8);
    }
    #pongCanvas {
      border: 3px solid #39ff14; /* Neon green border */
      display: block;
      background-color: #000;
      border-radius: 4px;
    }
    .message {
      margin: 1rem 0;
      padding: 1rem;
      border-radius: 5px;
      display: none;
    }
    .message.success {
      background-color: #39ff14;
      color: #000;
    }
    .message.error {
      background-color: #ff5722;
      color: #000;
    }
    /* Updated: Countdown Timer Overlay */
    #countdownTimer {
      position: fixed;  /* Changed from absolute to fixed */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 8rem;
      color: #39ff14;
      z-index: 2000;
      display: none;
    }
  </style>
</head>
<body>
  <div class="game-container container-fluid">
    <div class="row">
      <!-- Left Column: Game Canvas + Buttons -->
      <div class="col-md-8 d-flex flex-column align-items-center">
        <h2>Pong Game - Room <span id="roomIdLabel"></span></h2>
        <div>Round: <span id="roundNumber">1</span></div>

        <canvas
          id="pongCanvas"
          width="800"
          height="400"
          class="my-3"
        ></canvas>

        <!-- Simple controls (optional) -->
        <div class="mt-3">
          <button id="moveUpBtn" class="btn btn-secondary btn-sm">Move Up</button>
          <button id="moveDownBtn" class="btn btn-secondary btn-sm">Move Down</button>
          <button id="stopBtn" class="btn btn-secondary btn-sm">Stop</button>
        </div>

        <div id="message" class="message"></div>
      </div>

      <!-- Right Column: Scoreboard -->
      <div class="col-md-4">
        <h5 class="mt-3">Scoreboard</h5>
        <div id="scoresList" class="p-2 border rounded" style="min-height: 150px;">
          <!-- Scores appear here -->
        </div>
      </div>
    </div>
  </div>
  <!-- New: Countdown Timer Overlay -->
  <div id="countdownTimer"></div>

  <!-- Comment out the static End Game Modal -->
  <!--
  <div
    class="modal fade"
    id="endGameModal"
    tabindex="-1"
    aria-labelledby="endGameModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="endGameModalLabel">Game Over!</h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body" id="endGameDetails">
          <!-- Final scores/standings will go here -->
        </div>
        <div class="modal-footer">
          <!-- "Go Home" button -->
          <button id="goHomeButton" class="btn btn-primary">Go Home</button>
        </div>
      </div>
    </div>
  </div>
  -->

  <!-- Socket.io -->
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>

  <!-- Bootstrap JS (for modal functionality) -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  ></script>
  
  <!-- Include EndGameScreen.js -->
  <script src="/components/EndGameScreen.js"></script>

  <!-- Include constants.js -->
  <script src="/constants.js"></script>

  <script>
    const canvas = document.getElementById('pongCanvas');
    const ctx = canvas.getContext('2d');
    let socket;
    let currentUser;
    let currentRoom;

    let gameState = {
      paddles: {}, // { playerId: { x, y, width, height, score } }
      ball: { x: 0, y: 0, vx: 0, vy: 0, radius: 0 },
      roundNumber: 1
    };

    // Replace getting currentUser from localStorage:
    const params = new URLSearchParams(window.location.search);
    const currentRoom = params.get('roomId');
    const userId = parseInt(params.get('userId'), 10);
    const currentUser = { id: userId };
    document.getElementById('roomIdLabel').textContent = currentRoom || 'N/A';

    const socket = io('http://localhost:2053');
    socket.on('connect', () => {
      if (currentRoom) {
        socket.emit('joinRoomSocket', { roomId: currentRoom, playerId: currentUser.id });
      }
    });

    socket.on('disconnect', () => {
      console.log("Socket disconnected");
    });

    socket.on('error', (err) => {
      console.error("Socket error:", err);
    });

    // newRound
    socket.on('newRound', (data) => {
      document.getElementById('roundNumber').textContent = (data.initialState && data.initialState.roundNumber) || 1;
      showMessage(`Round ${ (data.initialState && data.initialState.roundNumber) || 1 } started!`, 'success');
      renderEndGameScreen(); // dynamically add the end game modal if not already in the DOM
    });

    // gameStateUpdate
    socket.on('gameStateUpdate', (data) => {
      // data = { state, scores }
      if (data.state) {
        gameState = data.state;
      }
      updateScoreboard(data.scores);
      renderGame();
    });

    // roundEnded
    socket.on('roundEnded', (data) => {
      console.log("Received roundEnded:", data);
      showMessage(`Round ended! Reason: ${data.reason}`, 'error');
      updateScoreboard(data.scores);
    });

    // gameEnded
    socket.on('gameEnded', (data) => {
      console.log("Received gameEnded:", data);

      // Build final results
      let html = `<p><strong>Reason:</strong> ${data.reason}</p>`;
      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        html += `<p><strong>Winner:</strong> ${winner.playerData.username || winner.playerId} (Score: ${winner.score})</p>`;
        if (data.standings.length > 1) {
          html += `<h5>Other Standings:</h5>`;
          data.standings.slice(1).forEach((player) => {
            html += `<p>Player ${player.playerId}: ${player.score} pts</p>`;
          });
        }
      }
      document.getElementById('endGameDetails').innerHTML = html;

      // Show the modal
      const endGameModal = new bootstrap.Modal(document.getElementById('endGameModal'));
      endGameModal.show();

      // NEW: Trigger finishRoom API to update DB scores after game ends
      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        // NEW: Pass only the first winner
        fetch('/api/rooms/finish', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ roomId: currentRoom, winners: [winner.playerId] })
        })
        .then(response => response.json())
        .then(result => console.log('Finished room:', result))
        .catch(err => console.error('Finish room failed:', err));
      }
    });

    // New: Listen for gameStarting event to show countdown timer
    socket.on('gameStarting', (data) => {
      console.log("Received gameStarting event with countdown:", data.countdown);
      const timerEl = document.getElementById('countdownTimer');
      timerEl.style.display = 'flex';
      timerEl.textContent = data.countdown;
      // Update countdown every second if needed
      const countdownInterval = setInterval(() => {
        let current = parseInt(timerEl.textContent, 10);
        if (current > 1) {
          timerEl.textContent = current - 1;
        } else {
          clearInterval(countdownInterval);
          timerEl.style.display = 'none';
        }
      }, 1000);
    });

    // Button event listeners
    document.getElementById('moveUpBtn').addEventListener('click', () => emitMove('up'));
    document.getElementById('moveDownBtn').addEventListener('click', () => emitMove('down'));
    document.getElementById('stopBtn').addEventListener('click', () => emitMove('stop'));

    // Keyboard events - prevent scrolling & send movement
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowUp') {
        e.preventDefault();
        emitMove('up');
      }
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        emitMove('down');
      }
    });
    document.addEventListener('keyup', (e) => {
      if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
        e.preventDefault();
        emitMove('stop');
      }
    });

    // Go Home button - navigate to your "home" page
    document.getElementById('goHomeButton').addEventListener('click', () => {
      // Replace "index.html" with your home page or route
      window.location.href = '/';
    });

    function emitMove(direction) {
      if (currentRoom && currentUser) {
        socket.emit('gameAction', {
          roomId: currentRoom,
          playerId: currentUser.id,
          action: {
            type: 'move',
            direction
          }
        });
      }
    }

    function showMessage(text, type) {
      const msg = document.getElementById('message');
      msg.textContent = text;
      msg.className = `message ${type}`;
      msg.style.display = 'block';
      // Optionally hide after a few seconds
      setTimeout(() => {
        msg.style.display = 'none';
      }, 3000);
    }

    function updateScoreboard(scores) {
      const scoresList = document.getElementById('scoresList');
      if (!scores || Object.keys(scores).length === 0) {
        scoresList.innerHTML = '<p>No scores yet</p>';
        return;
      }

      let html = '';
      for (const [playerId, score] of Object.entries(scores)) {
        html += `<p>Player <strong>${playerId}</strong>: ${score} pts</p>`;
      }
      scoresList.innerHTML = html;
    }

    function renderGame() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Render ball
      ctx.fillStyle = 'red';
      ctx.beginPath();
      ctx.arc(gameState.ball.x, gameState.ball.y, gameState.ball.radius, 0, Math.PI * 2);
      ctx.fill();

      // Render paddles
      if (gameState.paddles) {
        Object.values(gameState.paddles).forEach((paddle) => {
          ctx.fillStyle = 'blue';
          ctx.fillRect(paddle.x, paddle.y, paddle.width, paddle.height);
        });
      }
    }
  </script>
</body>
</html>
