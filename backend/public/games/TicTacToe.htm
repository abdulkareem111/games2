<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Tic-Tac-Toe Game</title>

  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />

  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      background-color: #0d0d0d;
      font-family: Arial, sans-serif;
      color: #fff;
    }
    .game-container {
      width: 100%;
      height: 100vh;
      display: flex;
      flex-direction: column;
      box-sizing: border-box;
      padding: 1rem;
      background-color: #181818;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.8);
    }
    .message {
      margin: 1rem 0;
      padding: 1rem;
      border-radius: 5px;
      display: none;
    }
    .message.success {
      background-color: #39ff14;
      color: #000;
    }
    .message.error {
      background-color: #ff5722;
      color: #000;
    }
    /* Grid styling */
    #ticTacToeGrid {
      width: 300px;
      margin: 0 auto;
      border-collapse: collapse;
    }
    #ticTacToeGrid td {
      width: 100px;
      height: 100px;
      text-align: center;
      vertical-align: middle;
      font-size: 2rem;
      cursor: pointer;
      border: 2px solid #39ff14;
      color: #ffffff;
      background-color: #000;
    }
    #ticTacToeGrid td:hover {
      background-color: #333;
    }
    #turnIndicator {
      margin-top: 1rem;
      font-size: 1.5rem;
      color: #39ff14;
    }
    /* Countdown Timer Overlay (if needed) */
    #countdownTimer {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 8rem;
      color: #39ff14;
      z-index: 2000;
      display: none;
    }
  </style>
</head>
<body>
  <div class="game-container container-fluid">
    <div class="row">
      <!-- Left Column: Game + Turn Indicator -->
      <div class="col-md-8 d-flex flex-column align-items-center">
        <h2>Tic-Tac-Toe Game - Room <span id="roomIdLabel"></span></h2>
        <div>Round: <span id="roundNumber">1</span></div>
        <div id="turnIndicator">Waiting for game state...</div>

        <table id="ticTacToeGrid" class="mt-4">
          <tbody>
            <!-- 3x3 -->
            <tr>
              <td data-row="0" data-col="0"></td>
              <td data-row="0" data-col="1"></td>
              <td data-row="0" data-col="2"></td>
            </tr>
            <tr>
              <td data-row="1" data-col="0"></td>
              <td data-row="1" data-col="1"></td>
              <td data-row="1" data-col="2"></td>
            </tr>
            <tr>
              <td data-row="2" data-col="0"></td>
              <td data-row="2" data-col="1"></td>
              <td data-row="2" data-col="2"></td>
            </tr>
          </tbody>
        </table>

        <div id="message" class="message"></div>
      </div>

      <!-- Right Column: Scoreboard -->
      <div class="col-md-4">
        <h5 class="mt-3">Scoreboard</h5>
        <div id="scoresList" class="p-2 border rounded" style="min-height: 150px;">
          <!-- Scores appear here -->
        </div>
      </div>
    </div>
  </div>

  <!-- Countdown Timer Overlay -->
  <div id="countdownTimer"></div>

  <!-- Comment out the static End Game Modal -->
  <!--
  <div
    class="modal fade"
    id="endGameModal"
    tabindex="-1"
    aria-labelledby="endGameModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="endGameModalLabel">Game Over!</h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body" id="endGameDetails">
          <!-- Final scores/standings will go here -->
        </div>
        <div class="modal-footer">
          <!-- "Go Home" button -->
          <button id="goHomeButton" class="btn btn-primary">Go Home</button>
        </div>
      </div>
    </div>
  </div>
  -->

  <!-- Socket.io -->
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>

  <!-- Bootstrap JS -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  ></script>

  <!-- Include EndGameScreen.js (if your system uses it) -->
  <script src="/components/EndGameScreen.js"></script>

  <!-- Include constants.js -->
  <script src="/constants.js"></script>

  <script>
    let socket;
    let currentUser;
    let currentRoom;
    let gameState = {
      board: [],
      currentTurnPlayer: null,
      symbols: {},
      roundNumber: 1
    };

    // Replace currentUser logic:
    const params = new URLSearchParams(window.location.search);
    const currentRoom = params.get('roomId');
    const userId = parseInt(params.get('userId'), 10);
    const currentUser = { id: userId };
    document.getElementById('roomIdLabel').textContent = currentRoom || 'N/A';

    // Init socket using common backend URL:
    const socket = io('http://localhost:2053');
    socket.on('connect', () => {
      if (currentRoom) {
        socket.emit('joinRoomSocket', { roomId: currentRoom, playerId: currentUser.id });
      }
    });

    socket.on('disconnect', () => {
      console.log('Socket disconnected');
    });

    socket.on('error', (err) => {
      console.error('Socket error:', err);
    });

    socket.on('newRound', (data) => {
      gameState = data.initialState || gameState;
      document.getElementById('roundNumber').textContent = gameState.roundNumber || 1;
      renderGame();
      showMessage('New round started!', 'success');
    });

    socket.on('gameStateUpdate', (data) => {
      if (data.state) {
        gameState = data.state;
      }
      updateScoreboard(data.scores);
      renderGame();
    });

    socket.on('roundEnded', (data) => {
      console.log('Received roundEnded:', data);
      showMessage('Round ended! Reason: ' + data.reason, 'error');
      updateScoreboard(data.scores);
    });

    socket.on('gameEnded', (data) => {
      console.log('Received gameEnded:', data);
      // Build final results
      let html = '<p><strong>Reason:</strong> ' + data.reason + '</p>';
      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        html += '<p><strong>Winner:</strong> ' + (winner.playerData.username || winner.playerId) + ' (Score: ' + winner.score + ')</p>';
        if (data.standings.length > 1) {
          html += '<h5>Other Standings:</h5>';
          data.standings.slice(1).forEach((player) => {
            html += '<p>Player ' + player.playerId + ': ' + player.score + ' pts</p>';
          });
        }
      }
      document.getElementById('endGameDetails').innerHTML = html;

      // Show the modal
      const endGameModal = new bootstrap.Modal(document.getElementById('endGameModal'));
      endGameModal.show();

      // Trigger finishRoom API to update DB scores after game ends
      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        fetch('/api/rooms/finish', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ roomId: currentRoom, winners: [winner.playerId] })
        })
        .then(response => response.json())
        .then(result => console.log('Finished room:', result))
        .catch(err => console.error('Finish room failed:', err));
      }
    });

    socket.on('gameStarting', (data) => {
      console.log('Received gameStarting event with countdown:', data.countdown);
      const timerEl = document.getElementById('countdownTimer');
      timerEl.style.display = 'flex';
      timerEl.textContent = data.countdown;
      const countdownInterval = setInterval(() => {
        let current = parseInt(timerEl.textContent, 10);
        if (current > 1) {
          timerEl.textContent = current - 1;
        } else {
          clearInterval(countdownInterval);
          timerEl.style.display = 'none';
        }
      }, 1000);
    });

    // Attach click listeners to each cell
    const cells = document.querySelectorAll('#ticTacToeGrid td');
    cells.forEach(cell => {
      cell.addEventListener('click', () => {
        const row = parseInt(cell.getAttribute('data-row'), 10);
        const col = parseInt(cell.getAttribute('data-col'), 10);
        emitMove(row, col);
      });
    });

    // "Go Home" button
    document.getElementById('goHomeButton').addEventListener('click', () => {
      window.location.href = '/';
    });

    function emitMove(row, col) {
      if (currentRoom && currentUser) {
        socket.emit('gameAction', {
          roomId: currentRoom,
          playerId: currentUser.id,
          action: {
            type: 'move',
            row,
            col
          }
        });
      }
    }

    function showMessage(text, type) {
      const msg = document.getElementById('message');
      msg.textContent = text;
      msg.className = 'message ' + type;
      msg.style.display = 'block';
      setTimeout(() => {
        msg.style.display = 'none';
      }, 3000);
    }

    function updateScoreboard(scores) {
      const scoresList = document.getElementById('scoresList');
      if (!scores || Object.keys(scores).length === 0) {
        scoresList.innerHTML = '<p>No scores yet</p>';
        return;
      }
      let html = '';
      for (const [playerId, score] of Object.entries(scores)) {
        html += '<p>Player <strong>' + playerId + '</strong>: ' + score + ' pts</p>';
      }
      scoresList.innerHTML = html;
    }

    function renderGame() {
      // Update round
      if (gameState.roundNumber) {
        document.getElementById('roundNumber').textContent = gameState.roundNumber;
      }

      // Display whose turn it is
      if (gameState.currentTurnPlayer && gameState.symbols) {
        const symbol = gameState.symbols[gameState.currentTurnPlayer];
        document.getElementById('turnIndicator').textContent = "It's " + symbol + "'s turn.";
      }

      // Render board
      const cells = document.querySelectorAll('#ticTacToeGrid td');
      cells.forEach(cell => {
        const row = parseInt(cell.getAttribute('data-row'), 10);
        const col = parseInt(cell.getAttribute('data-col'), 10);
        const val = (gameState.board && gameState.board[row]) ? gameState.board[row][col] : null;
        cell.textContent = val || '';
        // If it matches the current user's symbol, color in red
        if (val && gameState.symbols[currentUser.id] === val) {
          cell.style.color = 'red';
        } else {
          // Otherwise color white
          cell.style.color = '#ffffff';
        }
      });
    }
  </script>
</body>
</html>
