<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Memory Game</title>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <style>
    body {
      background-color: #f8f9fa;
      font-family: Arial, sans-serif;
    }
    .game-container {
      max-width: 600px;
      margin: 2rem auto;
      background-color: white;
      border-radius: 8px;
      padding: 1rem;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    #cardsContainer {
      display: grid;
      grid-template-columns: repeat(4, 100px);
      grid-gap: 10px;
      justify-content: center;
    }
    .card {
      width: 100px;
      height: 140px;
      background-color: #aaa;
      text-align: center;
      line-height: 140px;
      font-size: 2rem;
      cursor: pointer;
      border-radius: 6px;
      user-select: none;
    }
    .matched {
      background-color: #5cb85c !important;
    }
    #endGameScreen {
      display: none;
      margin-top: 1rem;
      background-color: #d4edda;
      padding: 1rem;
      border-radius: 5px;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="game-container">
    <h2>Memory Game - Room <span id="roomIdLabel"></span></h2>
    <div id="cardsContainer"></div>

    <div id="endGameScreen">
      <h3>Game Over!</h3>
      <div id="endGameDetails"></div>
      <button id="restartButton" class="btn btn-primary mt-2">Play Again</button>
    </div>
  </div>

  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <script>
    let socket;
    let currentUser;
    let currentRoom;
    let gameState = { cards: [] };

    currentUser = JSON.parse(localStorage.getItem('currentUser') || "null");
    if (!currentUser || !currentUser.id) {
      const id = prompt("Enter your player id:");
      currentUser = { id };
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
    }

    const params = new URLSearchParams(window.location.search);
    currentRoom = params.get('roomId');
    document.getElementById('roomIdLabel').textContent = currentRoom || 'N/A';

    socket = io('http://192.168.70.24:2053');
    socket.on('connect', () => {
      if (currentRoom) {
        socket.emit('joinRoomSocket', { roomId: currentRoom, playerId: currentUser.id });
      }
    });

    socket.on('gameStateUpdate', (data) => {
      if (data.state) {
        gameState = data.state;
      }
      renderCards();
    });

    socket.on('gameEnded', (data) => {
      document.getElementById('endGameScreen').style.display = 'block';
      let html = `<p><strong>Reason:</strong> ${data.reason}</p>`;
      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        html += `<p><strong>Winner:</strong> Player ${winner.playerId} (Score: ${winner.score})</p>`;
      }
      document.getElementById('endGameDetails').innerHTML = html;
    });

    document.getElementById('restartButton').addEventListener('click', () => {
      window.location.reload();
    });

    function renderCards() {
      const container = document.getElementById('cardsContainer');
      container.innerHTML = '';
      gameState.cards.forEach((card, index) => {
        const div = document.createElement('div');
        div.classList.add('card');
        if (card.flipped || card.matched) {
          div.textContent = card.value;
        }
        if (card.matched) {
          div.classList.add('matched');
        }
        div.addEventListener('click', () => {
          if (!card.flipped && !card.matched) {
            socket.emit('gameAction', {
              roomId: currentRoom,
              playerId: currentUser.id,
              action: { type: 'flip', index }
            });
          }
        });
        container.appendChild(div);
      });
    }
  </script>
</body>
</html>
