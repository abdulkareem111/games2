<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Minesweeper Game</title>
  <style>
    /* Simple styles for the Minesweeper board */
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background-color: #f0f0f0;
    }
    table {
      border-collapse: collapse;
      margin: 20px auto;
    }
    td {
      width: 40px;
      height: 40px;
      border: 1px solid #888;
      text-align: center;
      vertical-align: middle;
      font-size: 20px;
      cursor: pointer;
      user-select: none;
    }
    td.hidden {
      background-color: #bbb;
    }
    /* Changed: revealed cells now have a black background with white text */
    td.revealed {
      background-color: black;
      color: white;
    }
    td.flagged {
      background-color: #fdd;
    }
  </style>
</head>
<body>
  <h1>Minesweeper</h1>
  <div id="gameContainer">
    <table id="gameBoard"></table>
  </div>

  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <script>
    // Connect to Socket.IO server.
    const socket = io('http://localhost:2053');
    // Obtain roomId from the URL query string, or use a default.
    const params = new URLSearchParams(window.location.search);
    const roomId = params.get('roomId') || 'defaultRoom';
    // Get playerId from localStorage or prompt the user.
    let playerId = localStorage.getItem('playerId');
    if (!playerId) {
      playerId = prompt("Enter your player id:");
      localStorage.setItem('playerId', playerId);
    }

    socket.on('connect', () => {
      socket.emit('joinRoomSocket', { roomId, playerId });
    });

    const gameBoard = document.getElementById('gameBoard');
    let gridState = [];
    let numRows = 0;
    let numCols = 0;

    // Listen for the 'newRound' event to (re)initialize the board.
    socket.on('newRound', (data) => {
      console.log("newRound received:", data);
      numRows = data.gridSize.rows;
      numCols = data.gridSize.cols;
      // If state is provided, use it; otherwise, create a blank grid.
      if (data.state && data.state.grid) {
        gridState = data.state.grid;
      } else {
        gridState = Array.from({ length: numRows }, () =>
          Array.from({ length: numCols }, () => ({ state: 'hidden', flagged: false }))
        );
      }
      renderBoard();
    });

    // Listen for gameStateUpdate events to update the board view.
    socket.on('gameStateUpdate', (data) => {
      console.log("gameStateUpdate received:", data);
      if (data && data.state && data.state.grid) {
        gridState = data.state.grid;
        renderBoard();
      }
    });

    // Listen for roundEnded events.
    socket.on('roundEnded', (data) => {
      console.log("roundEnded received:", data);
      alert("Round ended: " + (data.message || ""));
    });

    // Modified gameEnded event handler to highlight exploded cell.
    socket.on('gameEnded', (data) => {
      console.log("gameEnded received:", data);
      alert("Game Ended! " + (data.message || ""));
      // New: If a mine explosion occurred, highlight the exploded cell.
      if (data.explodedAt) {
          const { row, col } = data.explodedAt;
          const explodedCell = document.querySelector(`td[data-row="${row}"][data-col="${col}"]`);
          if (explodedCell) {
              explodedCell.style.backgroundColor = 'red';
              explodedCell.style.color = 'white';
          }
      }
      // Optionally, disable further board interaction.
    });

    // Render the Minesweeper board using the current gridState.
    function renderBoard() {
      gameBoard.innerHTML = "";
      for (let r = 0; r < gridState.length; r++) {
        const tr = document.createElement('tr');
        for (let c = 0; c < gridState[r].length; c++) {
          const cell = gridState[r][c];
          const td = document.createElement('td');
          td.dataset.row = r;
          td.dataset.col = c;

          if (cell.state === 'hidden') {
            td.className = "hidden";
            if (cell.flagged) {
              td.textContent = "ðŸš©";
              td.classList.add("flagged");
            }
          } else if (cell.state === 'revealed') {
            td.className = "revealed";
            if (cell.mine) {
              td.textContent = "ðŸ’£";
            } else if (cell.adjacent > 0) {
              td.textContent = cell.adjacent;
            } else {
              td.textContent = "";
            }
          }

          // When a cell is clicked, provide immediate visual feedback by turning it black.
          td.addEventListener('click', () => {
            // Immediately change the cell's background to black with white text
            td.style.backgroundColor = "black";
            td.style.color = "white";
            console.log("Reveal cell at:", r, c);
            socket.emit('gameAction', {
              roomId,
              playerId,
              action: { type: 'reveal', row: r, col: c }
            });
          });
          // Right-click (contextmenu) to toggle flag.
          td.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            console.log("Flag cell at:", r, c);
            socket.emit('gameAction', {
              roomId,
              playerId,
              action: { type: 'flag', row: r, col: c }
            });
          });
          tr.appendChild(td);
        }
        gameBoard.appendChild(tr);
      }
    }
  </script>
</body>
</html>
