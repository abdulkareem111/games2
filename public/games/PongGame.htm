<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Pong Game</title>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <style>
    body {
      background-color: #f8f9fa;
      font-family: Arial, sans-serif;
    }
    .game-container {
      max-width: 700px;
      margin: 2rem auto;
      padding: 2rem;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    #pongCanvas {
      border: 2px solid #000;
      display: block;
      margin: 1rem auto;
      background-color: #fafafa;
    }
    .scoreboard {
      margin-top: 1rem;
      background-color: #f8f9fa;
      padding: 1rem;
      border-radius: 5px;
    }
    #endGameScreen {
      display: none;
      margin-top: 2rem;
      padding: 1rem;
      border: 2px solid #28a745;
      border-radius: 10px;
      background-color: #d4edda;
      text-align: center;
    }
    .message {
      display: none;
      margin: 1rem 0;
      padding: 1rem;
      border-radius: 5px;
    }
    .message.success {
      background-color: #d4edda;
      color: #155724;
    }
    .message.error {
      background-color: #f8d7da;
      color: #721c24;
    }
  </style>
</head>
<body>
  <div class="game-container">
    <h2>Pong Game - Room <span id="roomIdLabel"></span></h2>
    <div id="message" class="message"></div>

    <canvas id="pongCanvas" width="600" height="400"></canvas>

    <!-- Buttons for controlling paddles -->
    <div class="mt-3">
      <button id="p1Up" class="btn btn-primary btn-sm">P1 Up</button>
      <button id="p1Down" class="btn btn-primary btn-sm">P1 Down</button>
      <button id="p2Up" class="btn btn-secondary btn-sm">P2 Up</button>
      <button id="p2Down" class="btn btn-secondary btn-sm">P2 Down</button>
    </div>

    <div class="scoreboard mt-3">
      <h5>Scoreboard</h5>
      <div id="scoresList"></div>
    </div>

    <div id="endGameScreen">
      <h3>Game Over!</h3>
      <div id="endGameDetails"></div>
      <button id="restartButton" class="btn btn-primary mt-3">Play Again</button>
    </div>
  </div>

  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <script>
    const canvas = document.getElementById('pongCanvas');
    const ctx = canvas.getContext('2d');

    let socket;
    let currentUser;
    let currentRoom;
    let gameState = {
      ball: { x: 300, y: 200, vx: 3, vy: 2, radius: 8 },
      paddles: {
        left: { x:10, y:160, width:10, height:80, score:0 },
        right: { x:580, y:160, width:10, height:80, score:0 }
      },
      roundNumber: 1
    };

    // 1) Get current user from localStorage or prompt.
    currentUser = JSON.parse(localStorage.getItem('currentUser') || "null");
    if (!currentUser || !currentUser.id) {
      const id = prompt("Enter your player id (e.g., '1' or '2'):");
      currentUser = { id };
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
    }

    // 2) Parse roomId from URL.
    const params = new URLSearchParams(window.location.search);
    currentRoom = params.get('roomId') || 'defaultRoom';
    document.getElementById('roomIdLabel').textContent = currentRoom;

    // Initialize the socket.
    socket = io('http://localhost:2053');

    socket.on('connect', () => {
      socket.emit('joinRoomSocket', { roomId: currentRoom, playerId: currentUser.id });
    });

    socket.on('newRound', (data) => {
      showMessage(`New Round: #${data.roundNumber}`, 'success');
    });

    socket.on('gameStateUpdate', (data) => {
      if (data.state) {
        gameState = data.state;
      }
      updateScoreboard(data.scores);
      renderGame();
    });

    socket.on('roundEnded', (data) => {
      showMessage(`Round Ended! Reason: ${data.reason}`, 'error');
      updateScoreboard(data.scores);
    });

    socket.on('gameEnded', (data) => {
      document.getElementById('endGameScreen').style.display = 'block';
      let html = `<p><strong>Reason:</strong> ${data.reason}</p>`;
      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        html += `<p><strong>Winner:</strong> Player ${winner.playerId} (Score: ${winner.score})</p>`;
        if (data.standings.length > 1) {
          html += `<h5>Other Standings:</h5>`;
          data.standings.slice(1).forEach((p) => {
            html += `<p>Player ${p.playerId}: ${p.score}</p>`;
          });
        }
      }
      document.getElementById('endGameDetails').innerHTML = html;
    });

    // Emit move action without checking currentUser; allow testing both players.
    function emitMove(playerId, direction) {
      socket.emit('gameAction', {
        roomId: currentRoom,
        playerId: playerId,
        action: {
          type: 'move',
          direction
        }
      });
    }

    document.getElementById('p1Up').addEventListener('click', () => emitMove('1', 'up'));
    document.getElementById('p1Down').addEventListener('click', () => emitMove('1', 'down'));
    document.getElementById('p2Up').addEventListener('click', () => emitMove('2', 'up'));
    document.getElementById('p2Down').addEventListener('click', () => emitMove('2', 'down'));

    // Listen for keydown events for both sets of keys.
    document.addEventListener('keydown', (e) => {
      if (e.key === 'w' || e.key === 'W') {
        emitMove('1', 'up');
      } else if (e.key === 's' || e.key === 'S') {
        emitMove('1', 'down');
      } else if (e.key === 'ArrowUp') {
        emitMove('2', 'up');
      } else if (e.key === 'ArrowDown') {
        emitMove('2', 'down');
      }
    });

    function showMessage(text, type) {
      const msg = document.getElementById('message');
      msg.textContent = text;
      msg.className = `message ${type}`;
      msg.style.display = 'block';
    }

    function updateScoreboard(scores) {
      const scoresList = document.getElementById('scoresList');
      const entries = Object.entries(scores || {});
      if (entries.length === 0) {
        scoresList.innerHTML = '<p>No scores yet</p>';
        return;
      }
      let html = '';
      entries.forEach(([pid, score]) => {
        html += `<p>Player ${pid}: ${score} pts</p>`;
      });
      scoresList.innerHTML = html;
    }

    function renderGame() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw the ball
      if (gameState.ball) {
        ctx.beginPath();
        ctx.arc(gameState.ball.x, gameState.ball.y, gameState.ball.radius, 0, Math.PI * 2);
        ctx.fillStyle = 'blue';
        ctx.fill();
        ctx.closePath();
      }

      // Draw paddles
      if (gameState.paddles) {
        // Draw left paddle
        const l = gameState.paddles.left;
        ctx.fillStyle = 'green';
        ctx.fillRect(l.x, l.y, l.width, l.height);

        // Draw right paddle
        const r = gameState.paddles.right;
        ctx.fillStyle = 'red';
        ctx.fillRect(r.x, r.y, r.width, r.height);
      }
    }

    document.getElementById('restartButton').addEventListener('click', () => {
      window.location.reload();
    });
  </script>
</body>
</html>
