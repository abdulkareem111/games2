<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Snake Game</title>

  <!-- Bootstrap CSS -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />

  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      height: 100%;
      background-color: #0d0d0d;
      font-family: Arial, sans-serif;
      color: #fff;
    }
    .game-container {
      width: 100%;
      height: 100vh;
      display: flex;
      flex-direction: column;
      box-sizing: border-box;
      padding: 1rem;
      background-color: #181818;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.8);
    }
    #snakeCanvas {
      border: 3px solid #39ff14;
      display: block;
      background-color: #000;
      border-radius: 4px;
    }
    .message {
      margin: 1rem 0;
      padding: 1rem;
      border-radius: 5px;
      display: none;
    }
    .message.success {
      background-color: #39ff14;
      color: #000;
    }
    .message.error {
      background-color: #ff5722;
      color: #000;
    }
    #countdownTimer {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 8rem;
      color: #39ff14;
      z-index: 2000;
      display: none;
    }
  </style>
</head>
<body>
  <div class="game-container container-fluid">
    <div class="row">
      <div class="col-md-8 d-flex flex-column align-items-center">
        <h2>Snake Game - Room <span id="roomIdLabel"></span></h2>
        <div>Round: <span id="roundNumber">1</span></div>

        <canvas
          id="snakeCanvas"
          width="800"
          height="400"
          class="my-3"
        ></canvas>

        <div class="mt-3">
          <button id="moveUpBtn" class="btn btn-secondary btn-sm">Move Up</button>
          <button id="moveDownBtn" class="btn btn-secondary btn-sm">Move Down</button>
          <button id="stopBtn" class="btn btn-secondary btn-sm">Stop</button>
        </div>

        <div id="message" class="message"></div>
      </div>
      <div class="col-md-4">
        <h5 class="mt-3">Scoreboard</h5>
        <div id="scoresList" class="p-2 border rounded" style="min-height: 150px;">
          <!-- Scores -->
        </div>
      </div>
    </div>
  </div>

  <div id="countdownTimer"></div>

  <!-- Socket.io -->
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
  <!-- Bootstrap JS -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  ></script>
  
  <!-- Include EndGameScreen.js -->
  <script src="/components/EndGameScreen.js"></script>
  <!-- Include constants.js -->
  <script src="/constants.js"></script>

  <script>
    const canvas = document.getElementById('snakeCanvas');
    const ctx = canvas.getContext('2d');
    let socket;
    let currentUser;
    let currentRoom;

    let gameState = {
      snakes: {}, // { playerId: { segments: [{x,y},...], direction, score } }
      food: { x: 0, y: 0 },
      roundNumber: 1
    };

    currentUser = JSON.parse(localStorage.getItem('currentUser') || "null");
    if (!currentUser || !currentUser.id) {
      const id = prompt("Enter your player id:");
      currentUser = { id };
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
    }

    const params = new URLSearchParams(window.location.search);
    currentRoom = params.get('roomId');
    document.getElementById('roomIdLabel').textContent = currentRoom || 'N/A';

    // Initialize socket using BASE_URL from constants.js
    socket = io(BASE_URL);

    socket.on('connect', () => {
      if (currentRoom) {
        socket.emit('joinRoomSocket', {
          roomId: currentRoom,
          playerId: currentUser.id
        });
      }
    });

    socket.on('disconnect', () => {});

    socket.on('error', (err) => {
      console.error("Socket error:", err);
    });

    socket.on('newRound', (data) => {
      document.getElementById('roundNumber').textContent = data.roundNumber || 1;
      showMessage(`Round ${data.roundNumber} started!`, 'success');
      renderEndGameScreen();
    });

    socket.on('gameStateUpdate', (data) => {
      if (data.state) {
        gameState = data.state;
      }
      updateScoreboard(data.scores);
      renderGame();
    });

    socket.on('roundEnded', (data) => {
      showMessage(`Round ended! Reason: ${data.reason}`, 'error');
      updateScoreboard(data.scores);
    });

    socket.on('gameEnded', (data) => {
      let html = `<p><strong>Reason:</strong> ${data.reason}</p>`;
      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        html += `<p><strong>Winner:</strong> ${winner.playerData.username || winner.playerId} (Score: ${winner.score})</p>`;
        if (data.standings.length > 1) {
          html += `<h5>Other Standings:</h5>`;
          data.standings.slice(1).forEach((player) => {
            html += `<p>Player ${player.playerId}: ${player.score} pts</p>`;
          });
        }
      }
      document.getElementById('endGameDetails').innerHTML = html;
      const endGameModal = new bootstrap.Modal(document.getElementById('endGameModal'));
      endGameModal.show();

      if (data.standings && data.standings.length) {
        const winner = data.standings[0];
        fetch('/api/rooms/finish', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ roomId: currentRoom, winners: [winner.playerId] })
        })
        .then(r => r.json())
        .then(res => console.log('Finished room:', res))
        .catch(err => console.error('Finish room failed:', err));
      }
    });

    socket.on('gameStarting', (data) => {
      const timerEl = document.getElementById('countdownTimer');
      timerEl.style.display = 'flex';
      timerEl.textContent = data.countdown;
      const countdownInterval = setInterval(() => {
        let current = parseInt(timerEl.textContent, 10);
        if (current > 1) {
          timerEl.textContent = current - 1;
        } else {
          clearInterval(countdownInterval);
          timerEl.style.display = 'none';
        }
      }, 1000);
    });

    document.getElementById('moveUpBtn').addEventListener('click', () => emitMove('up'));
    document.getElementById('moveDownBtn').addEventListener('click', () => emitMove('down'));
    document.getElementById('stopBtn').addEventListener('click', () => emitMove('stop'));

    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowUp') { e.preventDefault(); emitMove('up'); }
      if (e.key === 'ArrowDown') { e.preventDefault(); emitMove('down'); }
      if (e.key === 'ArrowLeft') { e.preventDefault(); emitMove('left'); }
      if (e.key === 'ArrowRight') { e.preventDefault(); emitMove('right'); }
    });

    document.addEventListener('keyup', (e) => {
      if (['ArrowUp','ArrowDown','ArrowLeft','ArrowRight'].includes(e.key)) {
        e.preventDefault();
        emitMove('stop');
      }
    });

    document.getElementById('goHomeButton').addEventListener('click', () => {
      window.location.href = '/';
    });

    function emitMove(direction) {
      if (currentRoom && currentUser) {
        socket.emit('gameAction', {
          roomId: currentRoom,
          playerId: currentUser.id,
          action: { type: 'move', direction }
        });
      }
    }

    function showMessage(text, type) {
      const msg = document.getElementById('message');
      msg.textContent = text;
      msg.className = `message ${type}`;
      msg.style.display = 'block';
      setTimeout(() => {
        msg.style.display = 'none';
      }, 3000);
    }

    function updateScoreboard(scores) {
      const scoresList = document.getElementById('scoresList');
      if (!scores || Object.keys(scores).length === 0) {
        scoresList.innerHTML = '<p>No scores yet</p>';
        return;
      }
      let html = '';
      for (const [playerId, score] of Object.entries(scores)) {
        html += `<p>Player <strong>${playerId}</strong>: ${score} pts</p>`;
      }
      scoresList.innerHTML = html;
    }

    function renderGame() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw food
      ctx.fillStyle = 'red';
      ctx.fillRect(gameState.food.x, gameState.food.y, 10, 10);

      // Draw snakes
      for (const snake of Object.values(gameState.snakes)) {
        ctx.fillStyle = 'lime';
        snake.segments.forEach(seg => {
          ctx.fillRect(seg.x, seg.y, 10, 10);
        });
      }
    }
  </script>
</body>
</html>
